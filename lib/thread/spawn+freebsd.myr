use sys
use std

use "atomic"
use "tls"

pkg thread =
	const spawn : (fn : (-> void) -> std.result(tid, byte[:]))
;;


const Stacksz = 8*std.MiB
extern const exit : (-> void)

var stkbase : std.intptr = 0x10_0000_0000

const __init__ = {
	tlsmain = (std.bytealloc(sizeof(hdr) + (8 * sizeof(void#))) : hdr#)
	sys.sysarch(sys.Archamd64setfs, (tlsmain : byte#))
	tlsmain.tid = 0
}

const spawn = {fn
	-> spawnstk(fn, Stacksz)
}

const spawnstk = {fn, sz
	var stk : byte#, tos, hdr, tid, ret

	stk = getstk(sz)
	if stk == sys.Mapbad
		-> `std.Err "couldn't get stack"
	;;
	(tos, fn, hdr) = initstk(stk, fn, sz)

	ret = sys.thr_new(&[
		.startfn = (startthread : void#),
		.arg = (tos : void#),
		.stkbase = (stk : byte#),
		.stksz = sz,
		.tid = (&hdr.tid : uint32#),
		.ptid = &tid,
		.flags = 2,
		.rtp = (0 : sys.rtprio#)
	], sizeof(sys.thrparam))

	if ret < 0
		-> `std.Err "couldn't spawn thread"
	;;
	-> `std.Ok (tid : tid)
}

const initstk = {stk, fn, sz
	var tos, hdr, fp, env, envsz

	tos = (stk : std.intptr) + (sz : std.intptr) - ((tlscap * sizeof(void#)) : std.intptr)
	hdr = ((tos -= sizeof(hdr)) : hdr#)
	hdr.base = stk

	var fn1 = {
		sys.arch_prctl(sys.Archsetfs, (hdr : void#))
		fn()
	}

	envsz = std.fnenvsz(fn1)
	tos -= (envsz : std.intptr)
	env = tos
	tos -= sizeof((->void))
	fp = (tos : (->void)#)
	fp# = std.fnbdup(fn1, (env : byte#)[:envsz])
	-> ((tos : byte#), fn1, hdr)
}

const getstk = {sz
	-> sys.mmap((0 : byte#), sz, sys.Mprotrw, sys.Mpriv | sys.Manon, -1, 0)
}

const startthread = {f : (-> void)#
	f#()
	exit()
}

