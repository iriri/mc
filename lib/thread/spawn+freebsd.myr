use sys
use std

use "atomic"
use "tls"

pkg thread =
	const spawn : (fn : (-> void) -> std.result(tid, byte[:]))
;;


const Stacksz = 8*std.MiB
extern const exit : (-> void)

var stkbase : std.intptr = 0x10_0000_0000

const __init__ = {
	tlsmain = (std.bytealloc(8 * sizeof(void#)) : void##)
}

const spawn = {fn
	-> spawnstk(fn, Stacksz)
}

const spawnstk = {fn, sz
	var stk : byte#, tid, ctid, ret
	var f, tos, env, envsz

	stk = getstk(sz)
	if stk == sys.Mapbad
		-> `std.Err "couldn't get stack"
	;;
	tid = -1
	/* find top of stack */
	tos = (stk : std.intptr) + (sz : std.intptr)

	/* store the function we call */
	envsz = std.fnenvsz(fn)
	tos -= (envsz : std.intptr)
	sz -= (envsz : sys.size)
	env = tos
	tos -= sizeof((->void))
	sz -= sizeof((->void))
	f = (tos : (->void)#)
	f# = std.fnbdup(fn, (env : byte#)[:envsz])
	var repr = (&fn : int64[2]#)#

	ret = sys.thr_new(&[
		.startfn = (startthread : void#),
		.arg = (tos : void#),
		.stkbase = (stk : byte#),
		.stksz = sz,
		.tid = &ctid,
		.ptid = &tid,
		.flags = 2,
		.rtp = (0 : sys.rtprio#)
	], sizeof(sys.thrparam))

	if ret < 0
		-> `std.Err "couldn't spawn thread"
	;;
	-> `std.Ok ((stk : std.intptr) >> 24 : tid)
}

const getstk = {sz
	var base, p, m

	base = xadd(&stkbase, 0x1000000)
	p = sys.mmap((base : byte#), sz, sys.Mprotrw, sys.Mpriv | sys.Manon, -1, 0)
	std.assert(p == (base : byte#), "TODO: delete this assert\n")
	if p == sys.Mapbad
		-> p
	;;
	m = (p : std.intptr)
	-> (m : byte#)
}

const startthread = {f : (-> void)#
	f#()
	exit()
}

