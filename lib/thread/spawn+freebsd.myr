use sys
use std

use "common"
use "tls"

pkg thread =
	const spawn : (fn : (-> void) -> std.result(tid, byte[:]))
;;


const Stacksz = 8*std.MiB
extern const exit : (-> void)

var stkbase : std.intptr = 0x10_0000_0000

const spawn = {fn
	-> spawnstk(fn, Stacksz)
}

const spawnstk = {fn, sz
	var stk : byte#, tos, hdr, ret

	spawned = true
	stk = getstk(sz)
	if stk == sys.Mapbad
		-> `std.Err "couldn't get stack"
	;;
	(tos, sz, hdr) = initstk(stk, fn, sz)

	ret = sys.thr_new(&[
		.startfn = (startthread : void#),
		.arg = (tos : void#),
		.stkbase = (stk : byte#),
		.stksz = sz,
		.tid = (&hdr.tid : uint64#), // XXX: UHHHHH
		.ptid = Zptr,
		.flags = 2,
		.rtp = Zptr,
	], sizeof(sys.thrparam))

	if ret < 0
		-> `std.Err "couldn't spawn thread"
	;;
	-> `std.Ok (ret : tid)
}

const initstk = {stk, fn, sz
	var tos, hdr, fp, env, envsz

	tos = (stk : std.intptr) + (sz : std.intptr)
	tos -= sizeof(hdr) + ((tlscap * sizeof(void#)) : std.intptr)
	sz -= sizeof(hdr) + ((tlscap * sizeof(void#)) : sys.size)
	hdr = (tos : hdr#)
	hdr.base = stk

	var fn1 = {
		sys.sysarch(sys.Archamd64setfs, (hdr : byte#))
		fn()
	}

	envsz = std.fnenvsz(fn1)
	tos -= (envsz : std.intptr)
	sz -= (envsz : sys.size)
	env = tos
	tos -= sizeof((->void))
	sz -= sizeof((->void))
	fp = (tos : (->void)#)
	fp# = std.fnbdup(fn1, (env : byte#)[:envsz])
	-> ((tos : byte#), sz, hdr)
}

const getstk = {sz
	-> sys.mmap((0 : byte#), sz, sys.Mprotrw, sys.Mpriv | sys.Manon, -1, 0)
}

const startthread = {f : (-> void)#
	f#()
	exit()
}

