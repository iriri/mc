use std
use thread

use thrtestutil

const Nherd = 20

var val : uint64 = 0
var done : uint32 = 0
var mtx : thread.mutex

const main = {
	done = 0
	val = 0

	mtx = thread.mkmtx()
	thrtestutil.mkherd(Nherd, incvar)
	while thread.xget(&done) != Nherd
		/* nothing */
	;;
	if val != 1000 * 20
		std.fatal("mutexes are broken, got {}\n", val)
	;;

	thread.mtxlock(&mtx)
	var start = std.now()
	std.assert(!thread.mtxtimedlock(&mtx, 1_000_000),
		"mutexes are broken: expected sys.Etimedout\n")
	var elapsed = std.now() - start
	if elapsed < 900_000
		std.fatal("mtxtimedlock returned early after {} microseconds\n", elapsed)
	elif elapsed > 2_000_000
		std.fatal("mtxtimedlock returned late after {} microseconds\n", elapsed)
	;;
}

const incvar = {
	for var i = 0; i < 1000; i++
		thread.mtxlock(&mtx)
		val++
		thread.mtxunlock(&mtx)
	;;
	thread.xadd(&done, 1)
}
