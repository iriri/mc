use std

use "atomic"
use "common"
use "mutex"
use "futex"

pkg thread =
	type cond = struct
		_mtx	: mutex#
		_seq	: ftxtag
	;;

	const mkcond	: (mtx : mutex# -> cond)
	const condwait	: (cond : cond# -> void)
	const condsignal	: (cond : cond# -> void)
	const condbroadcast	: (cond : cond# -> void)
;;

const mkcond = {mtx
	-> [._mtx = mtx, ._seq = 0]
}

const condwait = {cond
	var seq
	var mtx

	mtx = cond._mtx
	seq = cond._seq

	mtxunlock(mtx)
	ftxwait(&cond._seq, seq, Zptr)

	/*
	We need to atomically set the mutex to contended. This allows us to
	pass responsibility for waking up the potential other waiters on to the
	unlocker of the mutex.
	*/
	mtxcontended(mtx)
}

const condsignal = {cond : cond#
	xadd(&cond._seq, 1)
	ftxwake(&cond._seq)
}

/*
Yes, this invites the thundering herd but that's what you get for not having a
requeue operation.
*/
const condbroadcast = {cond : cond#
	xadd(&cond._seq, 1)
	ftxwakeall(&cond._seq)
}

