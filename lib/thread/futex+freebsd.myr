use sys

use "atomic"
use "common"

pkg thread =
	type ftxtag = uint32
	impl atomic ftxtag

	const ftxwait : (uaddr : ftxtag#, val : ftxtag, tmout : uint32 -> sys.errno)
	const ftxwake : (uaddr : ftxtag# -> int)
	const ftxwakeall : (uaddr : ftxtag# -> int)
;;

const ftxwait = {uaddr, val, tmout
	var ut : sys._umtx_time
	var utp : sys._umtx_time#
	var utsize : void#
	var now
	var rc

	if tmout == Zptr
		utp = Zptr
		utsize = Zptr
	else
		ut = [
			._tmout = tmout#,
			._clockid = 1, /* CLOCK_MONOTONIC. Not exported from sys. */
		]
		utp = &ut
		utsize = (sizeof(sys._umtx_time) : void#)
	;;

	while (rc = sys.umtx_op((uaddr : void#), sys.Umtxwaituintpriv, (val : uint64), utsize, utp)

	match rc
	| 0: -> 0
	| sys.Eagain: -> sys.Eagain
	| sys.Etimedout: -> sys.Etimedout
	| err: std.fatal("error: futex returned {}\n", err)
	;;
}

const ftxwake = {uaddr
	-> sys.umtx_op((uaddr : void#), sys.Umtxwakepriv, 1, Zptr, Zptr)
}

const ftxwakeall = {uaddr
	-> sys.umtx_op((uaddr : void#), sys.Umtxwakepriv, 0x7fffffff, Zptr, Zptr)
}

impl atomic ftxtag =
	xget = {p; -> (xget32((p : uint32#)) : ftxtag)}
	xset = {p, v; xset32((p : uint32#), (v : uint32))}
	xadd = {p, v; -> (xadd32((p : uint32#), (v : uint32)) : ftxtag)}
	xcas = {p, old, new; -> (xcas32((p : uint32#), (old : uint32), (new : uint32)) : ftxtag)}
	xchg = {p, v; -> (xchg32((p : uint32#), (v : uint32)) : ftxtag)}
;;
