use std
use sys

use "atomic"
use "common"

pkg thread =
	type sem = struct
		_val : uint32
	;;

	const mksem : (v : uint32 -> sem)
	const semwait : (s : sem# -> void)
	const semtrywait : (s : sem# -> bool)
	const sempost : (s : sem# -> void)
;;

const mksem = {v
	-> [._val = v]
}

const semwait = {s
	var v = 0

	for ; ;
		while (v = s._val) > 0
			if xcas(&s._val, v, v - 1) == v
				-> void
			;;
		;;
		sys.futex(&s._val, sys.Futexwait, 0, Zptr, Zptr)
	;;
	-> void /* Unreachable */
}

const semtrywait = {s
	for ; ;
		var v = xget(&s._val)
		if v == 0
			-> false
		;;
		if xcas(&s._val, v, v - 1) == v
			-> true
		;;
	;;
	-> false /* Unreachable */
}

const sempost = {s
	std.assert(xadd(&s._val, 1) != ~0x0, "error: semaphore overflowed\n")

	/* Unconditionally wake one waiter */
	sys.futex(&s._val, sys.Futexwake, 1, Zptr, Zptr)
}
